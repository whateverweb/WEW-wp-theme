
var trigger_standard=document.getElementById("configuration_standard");
var trigger_custom=document.getElementById("configuration_custom");

var trigger_standard_a=document.getElementById("configuration_standard_a");
var trigger_custom_a=document.getElementById("configuration_custom_a");


var customConfigurationContainer=document.getElementById("custom-configuration-container");
var idContainer=document.getElementById("autogenerated-id");

var trigger_status=trigger_standard;

var editApplicationForm = document.getElementById("edit-application-form");

var userEmail = sessionStorage.getItem("userEmail");

var appKey = localStorage.getItem(userEmail+".curAppKey");
idContainer.innerHTML=appKey;
var sessionToken = sessionStorage.getItem("id");

var oldFormValues={};

var switchDebugMode=new switchButton("debug-mode",sendDebugMode);




// getting the application details and fill the form
myGuardian.ajaxClient.addRequestToQueue({
	  method:'GET', 
	  link:WhateverConfig.baseURL + 'core/app/' + appKey + '/' + sessionToken,
	  callbackFunction:getAppDetailsCallback, 
	  responseFormat:"JSON",
	});

function getAppDetailsCallback(resultJSON) {
	if (resultJSON.statusCode != null) {
		switch (resultJSON.statusCode) {
		case "401":
			// than we have a problem
			  myGuardian.showRelogin();
			break;
		case "500":
			ErrorMessages.showError("Internal server error");
			break;
		}
	} else {
		// should fill the form
		editApplicationForm.appName.value = oldFormValues.oldAppName = resultJSON.name;
		editApplicationForm.appDescription.value = oldFormValues.oldAppDescription = resultJSON.desc;
		
		var tmpHostName="";
		if(resultJSON.hostname){
			tmpHostName=resultJSON.hostname;
		}
		editApplicationForm.hostNameCustom.value = oldFormValues.oldHostName = tmpHostName;
		
		var tmpAlias=resultJSON.alias.split("."+WhateverConfig.domain)[0];
		if(tmpAlias.search(appKey)>-1){
			tmpAlias="";
		}
		editApplicationForm.baseURLCustom.value = oldFormValues.oldBaseURL = tmpAlias;
		//editApplicationForm.cNameCustom.value = oldFormValues.oldCName = "";
		/*editApplicationForm.cNameCustom.value=oldFormValues.oldCName = tmpAlias;//.split("."+WhateverConfig.domain)[0];
		
		var tmpBaseURL=resultJSON.domain;
		if(tmpBaseURL.search(appKey)>-1){
			tmpBaseURL="";
		}
		editApplicationForm.baseURLCustom.value=oldFormValues.oldBaseURL = tmpBaseURL;*/
		
		// setting the current debug mode	
		switchDebugMode.setState(resultJSON.debugMode);
		debugMode=switchDebugMode.state;
	    
		if(oldFormValues.oldHostName!=""  || oldFormValues.oldBaseURL!="" /*|| oldFormValues.oldCName!=""*/){
			trigger_custom.click();
		}else{
			trigger_standard.click();
		}
		
		oldFormValues.trigger_status=trigger_status;
		toggleMasterPreloader(false);
	}
}



function checkFormEditApplication(form) {
	
	if(trigger_custom.checked){
		if(form.hostNameCustom.value=="" && form.baseURLCustom.value=="" ){
			ErrorMessages.showError("Please fill at least the domain or base URL field.");
			return false;
		}
	}
	
	var rules=[
		   		{
		   			field:"appName",
		   			rules:["regexp:.{2,}"],
		   			errors:["Please enter the application name."]
		   		}
		  ]
	
	// check if something changed
	if(!checkMainFormElementsChanged(form)){
		if(trigger_custom.checked){ 
			if(!checkSecondaryFormElementsChanged(form)){
					ErrorMessages.showError("No changes since last save.");
					return false;
			}
		}else{
			ErrorMessages.showError("No changes since last save.");
			return false;
		}
	}
	
	
	
	formValidator.validate(form,rules,checkFormEditApplicationError,checkFormEditApplicationSuccess);
	return false;
}

function checkMainFormElementsChanged(form){
	return !(form.appName.value == oldFormValues.oldAppName
			&& form.appDescription.value == oldFormValues.oldAppDescription 
			&& oldFormValues.trigger_status==trigger_status);
}

function checkSecondaryFormElementsChanged(form){
	return !(form.hostNameCustom.value == oldFormValues.oldHostName
		   && form.baseURLCustom.value == oldFormValues.oldBaseURL);
}

function checkFormEditApplicationError(error){
	ErrorMessages.showError(error);
}

function checkFormEditApplicationSuccess(form){
	toggleMasterPreloader(true);
	var sessionToken = sessionStorage.getItem("id");
	var appName = form.appName.value;
	
	
	var link=WhateverConfig.baseURL + 'core/app/' + appKey + '/' + sessionToken;
	link += "?appname=" + WhateverUtils.fixedEncodeURIComponent(form.appName.value);
	link += '&desc=' + WhateverUtils.fixedEncodeURIComponent(form.appDescription.value)
	
	if(trigger_custom.checked){
		link += '&hostname=' + WhateverUtils.fixedEncodeURIComponent(form.hostNameCustom.value);
		link += '&alias=' + WhateverUtils.fixedEncodeURIComponent(form.baseURLCustom.value);
		link += '&domain=';
		/*link += '&domain=' + WhateverUtils.fixedEncodeURIComponent(form.baseURLCustom.value);
		link += "&alias="+WhateverUtils.fixedEncodeURIComponent(form.cNameCustom.value);*/
	}else{
		link += '&hostname=';
		link += '&domain=';
		link += "&alias=";
	}
	
	myGuardian.ajaxClient.addRequestToQueue({
		  method:'PUT', 
		  link:link,
		  callbackFunction:editAppCallback, 
		  responseFormat:"JSON",
		});
}

function editAppCallback(resultJSON) {
	toggleMasterPreloader(false);
	if (resultJSON.statusCode != null) {
		switch (resultJSON.statusCode) {
			case "401":
				// than we have a problem
				  myGuardian.showRelogin();
				break;
			case "409":
				// than we have a name duplicate
				ErrorMessages.showError("You already have an application with this name, alias or site domain.");
				break;
			case "500":
				ErrorMessages.showError("Internal server error");
				break;
		}
	} else {
		ErrorMessages.showSuccess("Application settings successfully updated");
		updateOldValues();
	}
}

function updateOldValues(){
	oldFormValues.oldAppName=editApplicationForm.appName.value; 
	oldFormValues.oldAppDescription=editApplicationForm.appDescription.value;
	oldFormValues.trigger_status=trigger_status;
	oldFormValues.oldHostName=editApplicationForm.hostNameCustom.value;
	oldFormValues.oldBaseURL=editApplicationForm.baseURLCustom.value;
	/*oldFormValues.oldCName=editApplicationForm.cNameCustom.value;*/
}

var debugMode;
var debugOn;
var debugOff;
var sending=false;

function sendDebugMode(){
	if(sending || switchDebugMode.state==debugMode){
		return false;
	}
	sending=true;
	
	var link=WhateverConfig.baseURL + 'core/app/' + appKey + '/'+switchDebugMode.state+'/' + sessionToken;
	myGuardian.ajaxClient.addRequestToQueue({
		  method:'PUT', 
		  link:link,
		  callbackFunction:sendDebugModeCallback, 
		  responseFormat:"JSON",
		});
}

function sendDebugModeCallback(resultJSON) {
	if (resultJSON.statusCode != null) {
	  switch (resultJSON.statusCode) {
		case "401":
			// than we have a problem
			  myGuardian.showRelogin();
			break;
		case "500":
			ErrorMessages.showError("Internal server error.");
			break;
	  }
	  switchDebugMode.setState(debugMode);
    
	} else {
		switchDebugMode.setState(resultJSON.debugMode);
		debugMode=resultJSON.debugMode;
	}
	sending=false;
}



function toggleElementsAvailability(trigger,enabled){
	var container=trigger.parentNode;
	var children=container.getElementsByClassName("options-subsection");
	var childrenInputs=container.getElementsByTagName("input");
	var newClassName=enabled?"options-subsection":"options-subsection disabled";
	for(var i=0;i<children.length;i++){
		children[i].className=newClassName;
	}
	for(var i=0;i<childrenInputs.length;i++){
		if(childrenInputs[i].type=="text" && childrenInputs[i].name!="cNameCustom"){
			childrenInputs[i].disabled=!enabled;
		}
	}
}

trigger_standard.onclick=trigger_custom.onclick=function(){
	if(trigger_custom.checked){
		trigger_status=trigger_custom;
		toggleElementsAvailability(trigger_custom,true);
		toggleElementsAvailability(trigger_standard,false);
	}else{
		trigger_status=trigger_standard;
		toggleElementsAvailability(trigger_custom,false);
		toggleElementsAvailability(trigger_standard,true);
	}
}

trigger_standard_a.onclick=function(){
	trigger_standard.click();
}

trigger_custom_a.onclick=function(){
	trigger_custom.click();
}